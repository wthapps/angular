{"version":3,"sources":["ng://@wthapps/ngx-quill/lib/ngx-quill.service.ts","ng://@wthapps/ngx-quill/lib/ngx-quill.component.ts","ng://@wthapps/ngx-quill/lib/ngx-quill.constants.ts","ng://@wthapps/ngx-quill/lib/ngx-quill.module.ts"],"names":["NgxQuillService","Injectable","args","providedIn","Quill","NgxQuillComponent","elementRef","domSanitizer","doc","platformId","renderer","zone","config","_this","this","emptyArray","format","theme","modules","readOnly","placeholder","maxLength","minLength","required","formats","sanitize","style","strict","scrollingContainer","customOptions","onEditorCreated","EventEmitter","onContentChanged","onSelectionChanged","disabled","valueGetter","quillEditor","editorElement","html","children","innerHTML","modelValue","getText","getContents","JSON","stringify","e","valueSetter","value","SecurityContext","HTML","clipboard","convert","parse","insert","defaultModules","bounds","body","nativeElement","insertAdjacentHTML","editorElem","querySelector","prototype","ngAfterViewInit","isPlatformServer","require","toolbarElem","undefined","trim","Object","keys","forEach","key","setStyle","customOption","newCustomOption","import","whitelist","register","content","setContents","setText","contents","history","clear","setDisabledState","emit","selectionChangeEvent","on","range","oldRange","source","run","editor","onModelTouched","textChangeEvent","delta","oldDelta","text","onModelChange","ngOnDestroy","removeListener","ngOnChanges","changes","enable","currentValue","root","dataset","currentStyling","previousStyling","previousValue","removeStyle","writeValue","isDisabled","disable","setAttribute","removeAttribute","registerOnChange","fn","registerOnTouched","validate","err","valid","textLength","length","minLengthError","given","maxLengthError","requiredError","empty","Component","selector","template","styles","encapsulation","ViewEncapsulation","None","providers","multi","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","ElementRef","DomSanitizer","Inject","DOCUMENT","decorators","type","PLATFORM_ID","Renderer2","NgZone","Input","Output","toolbar","header","list","script","indent","direction","size","color","slice","background","font","align","Éµ0","NgxQuillModule","forRoot","ngModule","useValue","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxQuillService {\n\n  constructor() { }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SecurityContext,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  Validator\n} from '@angular/forms';\n\nimport { DOCUMENT } from '@angular/common';\nimport { CustomOption, NgxQuillConfig, NgxQuillModules } from './ngx-quill.interfaces';\n\n\n// import * as QuillNamespace from 'quill'\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare var require: any;\n// tslint:disable-next-line:variable-name\nlet Quill: any = null;\n\n\n\n@Component({\n\n  selector: 'w-ngx-quill',\n  template: `\n    <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n  `,\n  styles: [],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxQuillComponent)\n    },\n    {\n      multi: true,\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => NgxQuillComponent)\n    }\n  ],\n})\n\nexport class NgxQuillComponent\n  implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n\n  quillEditor: any;\n  editorElem: HTMLElement;\n  emptyArray: any[] = [];\n  content: any;\n  selectionChangeEvent: any;\n  textChangeEvent: any;\n  defaultModules: NgxQuillModules | {};\n\n  onModelChange: any;\n  onModelTouched: any;\n\n  @Input() format: 'object' | 'html' | 'text' | 'json' = 'html';\n  @Input() theme = 'snow';\n  // tslint:disable-next-line:ban-types\n  @Input() modules: { [index: string]: Object } | null = null;\n  @Input() readOnly = false;\n  @Input() placeholder = 'Insert text here ...';\n  @Input() maxLength: number | null = null;\n  @Input() minLength: number | null = null;\n  @Input() required = false;\n  @Input() formats: string[] | null = null;\n  @Input() sanitize = false;\n  @Input() style: any = null;\n  @Input() strict = true;\n  @Input() scrollingContainer: HTMLElement | string | null = null;\n  @Input() bounds: HTMLElement | string;\n  @Input() customOptions: CustomOption[] = [];\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter();\n  @Output() onContentChanged: EventEmitter<any> = new EventEmitter();\n  @Output() onSelectionChanged: EventEmitter<any> = new EventEmitter();\n\n  private disabled = false; // used to store initial value before ViewInit\n\n  constructor(\n    private elementRef: ElementRef,\n    private domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) private doc: any,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private renderer: Renderer2,\n    private zone: NgZone,\n    @Inject('config') private config: NgxQuillConfig\n  ) {\n    this.defaultModules = this.config && this.config.modules || {}\n    this.bounds = this.doc.body\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      'beforeend',\n      '<div quill-editor-element></div>'\n    );\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    );\n  }\n\n  @Input()\n  valueGetter = (quillEditor: any, editorElement: HTMLElement): any => {\n    let html: string | null = editorElement.children[0].innerHTML\n    if (html === '<p><br></p>' || html === '<div><br><div>') {\n      html = null;\n    }\n    let modelValue = html\n\n    if (this.format === 'text') {\n      modelValue = quillEditor.getText();\n    } else if (this.format === 'object') {\n      modelValue = quillEditor.getContents();\n    } else if (this.format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents());\n      } catch (e) {\n        modelValue = quillEditor.getText();\n      }\n    }\n\n    return modelValue;\n  }\n\n  @Input()\n  valueSetter = (quillEditor: any, value: any): any => {\n    if (this.format === 'html') {\n      if (this.sanitize) {\n        value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n      }\n      return quillEditor.clipboard.convert(value);\n    } else if (this.format === 'json') {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return [{ insert: value }];\n      }\n    }\n\n    return ;\n  };\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    if (!Quill) {\n      Quill = require('quill');\n    }\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    );\n    const modules = this.modules || this.defaultModules\n    let placeholder = this.placeholder\n\n    if (this.placeholder !== null && this.placeholder !== undefined) {\n      placeholder = this.placeholder.trim();\n    }\n\n    if (toolbarElem) {\n      // tslint:disable-next-line:no-string-literal\n      modules['toolbar'] = toolbarElem;\n    }\n\n    if (this.style) {\n      Object.keys(this.style).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.style[key]);\n      });\n    }\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true);\n    })\n\n    this.quillEditor = new Quill(this.editorElem, {\n      bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,\n      formats: this.formats,\n      modules,\n      placeholder,\n      readOnly: this.readOnly,\n      scrollingContainer: this.scrollingContainer,\n      strict: this.strict,\n      theme: this.theme || 'snow'\n    });\n\n    if (this.content) {\n      if (this.format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent');\n      } else if (this.format === 'text') {\n        this.quillEditor.setText(this.content, 'silent');\n      } else if (this.format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent');\n        }\n      } else {\n        if (this.sanitize) {\n          this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n        }\n        const contents = this.quillEditor.clipboard.convert(this.content)\n        this.quillEditor.setContents(contents, 'silent');\n      }\n\n      this.quillEditor.history.clear();\n    }\n\n    // initialize disabled status based on this.disabled as default value\n    this.setDisabledState()\n\n    this.onEditorCreated.emit(this.quillEditor);\n\n    // mark model as touched if editor lost focus\n    this.selectionChangeEvent = this.quillEditor.on(\n      'selection-change',\n      (range: any, oldRange: any, source: string) => {\n        this.zone.run(() => {\n          this.onSelectionChanged.emit({\n            editor: this.quillEditor,\n            oldRange,\n            range,\n            source\n          });\n\n          if (!range && this.onModelTouched) {\n            this.onModelTouched();\n          }\n        });\n      }\n    );\n\n    // update model if text changes\n    this.textChangeEvent = this.quillEditor.on(\n      'text-change',\n      (delta: any, oldDelta: any, source: string): void => {\n        // only emit changes emitted by user interactions\n\n        const text = this.quillEditor.getText();\n        const content = this.quillEditor.getContents();\n\n        let html: string | null = this.editorElem.children[0].innerHTML;\n        if (html === '<p><br></p>' || html === '<div><br><div>') {\n          html = null;\n        }\n\n        this.zone.run(() => {\n          if (source === 'user' && this.onModelChange) {\n            this.onModelChange(\n              this.valueGetter(this.quillEditor, this.editorElem)\n            );\n          }\n\n          this.onContentChanged.emit({\n            content,\n            delta,\n            editor: this.quillEditor,\n            html,\n            oldDelta,\n            source,\n            text\n          });\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.selectionChangeEvent) {\n      this.selectionChangeEvent.removeListener('selection-change');\n    }\n    if (this.textChangeEvent) {\n      this.textChangeEvent.removeListener('text-change');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return;\n    }\n    // tslint:disable:no-string-literal\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue);\n    }\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder =\n        changes['placeholder'].currentValue;\n    }\n    if (changes['style']) {\n      const currentStyling = changes['style'].currentValue\n      const previousStyling = changes['style'].previousValue\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach((key: string) => {\n          this.renderer.removeStyle(this.editorElem, key);\n        });\n      }\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach((key: string) => {\n          this.renderer.setStyle(this.editorElem, key, this.style[key]);\n        });\n      }\n    }\n    // tslint:enable:no-string-literal\n  }\n\n  writeValue(currentValue: any) {\n    this.content = currentValue\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (this.format === 'text') {\n          this.quillEditor.setText(currentValue);\n        } else {\n          this.quillEditor.setContents(\n            this.valueSetter(this.quillEditor, this.content)\n          );\n        }\n        return;\n      }\n      this.quillEditor.setText('');\n    }\n  }\n\n  setDisabledState(isDisabled: boolean = this.disabled): void {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable()\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable();\n        }\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null;\n    }\n\n    const err: {\n      minLengthError?: {\n        given: number\n        minLength: number\n      }\n      maxLengthError?: {\n        given: number\n        maxLength: number\n      }\n      requiredError?: { empty: boolean }\n    } = {}\n    let valid = true;\n\n    const textLength = this.quillEditor.getText().trim().length;\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      }\n\n      valid = false;\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      }\n\n      valid = false;\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      }\n\n      valid = false;\n    }\n\n    return valid ? null : err;\n  }\n\n}\n","const emptyArray: any[] = [];\n\nexport const defaultModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ header: 1 }, { header: 2 }], // custom button values\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n    [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n    [{ direction: 'rtl' }], // text direction\n\n    [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n    [\n      { color: emptyArray.slice() },\n      { background: emptyArray.slice() }\n    ], // dropdown with defaults from theme\n    [{ font: emptyArray.slice() }],\n    [{ align: emptyArray.slice() }],\n\n    ['clean'], // remove formatting button\n\n    ['link', 'image', 'video'] // link and image, video\n  ]\n};\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxQuillComponent } from './ngx-quill.component';\nimport { NgxQuillConfig } from './ngx-quill.interfaces';\nimport { defaultModules } from './ngx-quill.constants';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxQuillComponent],\n  exports: [NgxQuillComponent],\n  providers: [\n    {\n      provide: 'config',\n      useValue: defaultModules\n    }\n  ],\n})\nexport class NgxQuillModule {\n  static forRoot(config?: NgxQuillConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxQuillModule,\n      providers: [\n        {\n          provide: 'config',\n          useValue: config || defaultModules\n        }\n      ]\n    }\n  }\n}\n\n\n\n\n\n"]}